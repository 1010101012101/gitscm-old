
<h2 id="about">About Git</h2>

<div style="float: right">
<table class="releases">
	<tr><th><a href="course/index.html">Git Crash Courses</a></th></tr>
	<tr><td align="center">
	<a href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html">Git for everyone</a>
	<!--
	<br /><a href="course/new.html">New to revision control?</a>
	-->
	<br /><a href="course/stgit.html">Maintaining external patches</a>
	<br /><a href="course/svn.html">Git for SVN users</a>
	<!-- <br /><em>More to come soon...</em> -->
	</td></tr>
</table>
</div>

<p>Git is distributed version control system focused on
speed, effectivity and real-world usability on large projects.
Its highlights include:</p>

<!-- Heavily inspired by Wikipedia -->

<ul>

<li>
<b>Distributed development.</b>
Like most other modern version control systems, Git gives each developer
a local copy of the entire development history,
and changes are copied from one such repository to another.
These changes are imported as additional development branches,
and can be merged in the same way as a locally developed branch.
Repositories can be easily accessed via the efficient Git protocol
(optionally wrapped in ssh for authentication and security)
or simply using HTTP - you can publish your repository anywhere
without <em>any</em> special webserver configuration required.
</li>

<li>
<b>Strong support for non-linear development.</b>
Git supports rapid and convenient branching and merging,
and includes powerful tools for visualizing
and navigating a non-linear development history.
</li>

<li>
<b>Efficient handling of large projects.</b>
Git is very fast and scales well
even when working with large projects and long histories.
It is commonly an order of magnitude faster
than most other version control systems,
and several orders of magnitude faster on some operations.
It also uses an extremely efficient packed format
for long-term revision storage
that currently tops any other open source version control system.
</li>

<li>
<b>Cryptographic authentication of history.</b>
The Git history is stored in such a way
that the name of a particular revision (a "commit" in Git terms)
depends upon the complete development history leading up to that commit.
Once it is published, it is not possible to change the old versions
without it being noticed. Also, tags can be cryptographically signed.
</li>

<li>
<b>Toolkit design.</b>
Following the Unix tradition,
Git is a collection of many small tools written in C,
and a number of scripts that provide convenient wrappers.
Git provides tools for both convenient human usage and easy
scripting to perform new clever operations.
</li>

</ul>

<p>Besides providing a version control system,
the Git project provides a generic low-level toolkit
for tree history storage and directory content management.
Traditionally, the toolkit is called the <em>plumbing</em>.
Aside the user interface coming with Git itself,
several other projects (so-called <em>porcelains</em>)
offer compatible version control interfaces - see the
<a href="#tools">related tools</a> list.</p>


<hr />
