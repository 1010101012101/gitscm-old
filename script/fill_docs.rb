require 'httparty'
require 'lib/db'

class Documentor
  include HTTParty

  base_uri 'https://api.github.com'
  default_params :output => 'json'

  def self.populate(full = false)
    html_sha = get("/repos/schacon/git/git/refs/heads/html").parsed_response['object']['sha']
    commits = get_commits(html_sha, full)
    populate_docs(commits)
  end

  def self.populate_docs(commits)
    p commits.first
    commits.each do |version, sha, tree, date|
      puts "V: #{version}"
      doc = DocVersion.first(:version => version)
      if !doc
        doc_version = DocVersion.create(:version => version, :commit_sha => sha, :tree_sha => tree, :created_at => date)
        # get a list of all the html pages
        tree = get("/repos/schacon/git/git/trees/#{tree}").parsed_response['tree']
        tree.each do |entry|
          if (entry['path'] =~ /\.html$/) && (entry['mode'] == '100644')
            name = entry['path'].gsub('.html', '')
            blob_sha = entry['sha']
            puts name
            puts blob_sha
            # create a DocFile if it doesn't exist
            doc_file = DocFile.first_or_create(:name => name)

            # create a doc of the contents
            html = get("/repos/schacon/git/git/blobs/#{blob_sha}", :headers => {'Accept' => 'application/vnd.github-blob.raw'}).body
            doc = Doc.create(:doc => html, :doc_file => doc_file, :doc_version => doc_version)
          end
        end
      end
    end
  end

  def self.get_commits(sha, full)
    commits = []
    cpage, sha = get_commits_page(sha)
    commits += cpage
    if full
      while cpage.size > 0
        cpage, sha = get_commits_page(sha)
        commits += cpage
      end
    end
    commits
  end

  def self.get_commits_page(sha)
    last_sha = nil
    shas = []
    commits = get("/repos/schacon/git/commits", :query => {:sha => sha, :per_page => 100}).parsed_response
    commits.each do |commit|
      message = commit['commit']['message'].split("\n").first
      if m = /^Autogenerated HTML docs for v([\d\.]+?)$/.match(message)
        puts m[1]
        shas << [m[1], commit['sha'], commit['commit']['tree']['sha'], commit['commit']['author']['date']]
      end
      last_sha = commit['sha']
    end
    [shas, last_sha]
  end

end

Documentor.populate

